name: Test & Build Master

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:  # Enables manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
          
      - name: Security scan with Bandit
        run: |
          pip install bandit
          bandit -r . -x tests/
          
      - name: Run unit and integration tests
        run: |
          if [ -d "tests" ]; then
            pytest --cov=./ --cov-report=xml
          else
            echo "No tests directory found. Skipping tests."
          fi
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          
      - name: Run E2E tests with Playwright
        run: |
          # Check if e2e tests directory exists
          if [ -d "tests/e2e" ]; then
            pip install playwright pytest-playwright
            # Install only Chromium as per guidelines
            playwright install chromium
            # Run E2E tests with traces for debugging failures
            pytest tests/e2e/ --browser chromium --tracing on
          else
            echo "No E2E tests directory found. Skipping E2E tests."
            # Create directories for artifacts to avoid warning
            mkdir -p test-results
            mkdir -p playwright-report
            echo "Placeholder for test results" > test-results/placeholder.txt
            echo "Placeholder for playwright report" > playwright-report/placeholder.txt
          fi
        env:
          # Pass test mode flag for E2E tests
          TEST_MODE: true
        
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7
          
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Build production assets
        run: |
          # Check if package.json exists
          if [ -f "package.json" ]; then
            npm install
            npm run build
          else
            echo "No package.json found. Skipping frontend build."
          fi
          
      - name: Test production build
        run: |
          # Check if app.py or main.py exists
          if [ -f "app.py" ]; then
            python -c "import app; print('Build successful')"
          elif [ -f "main.py" ]; then
            python -c "import main; print('Build successful')"
          else
            echo "No main application file found. Assuming build is successful."
          fi 